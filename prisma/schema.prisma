// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Enterprise {
  id            String   @id @default(cuid())
  name          String
  domain        String   @unique
  employeeCount String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  admins        User[]   @relation("EnterpriseAdmins")
  employees     User[]   @relation("EnterpriseEmployees")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          Role      @default(USER)
  firstName     String
  lastName      String
  phone         String?
  enterprise    Enterprise? @relation("EnterpriseEmployees", fields: [enterpriseId], references: [id])
  enterpriseId  String?
  isAdmin       Enterprise? @relation("EnterpriseAdmins", fields: [adminForId], references: [id])
  adminForId    String?
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model AnalyticsEvent {
  id          String   @id @default(cuid())
  timestamp   DateTime @default(now())
  activeUsers Int      @default(0)
  completions Int      @default(0)
  enrollments Int      @default(0)
}

model Course {
  id               String          @id @default(cuid())
  title            String
  description      String
  status           String         // 'active', 'draft', 'archived'
  fileType         String         // 'pdf', 'docx', 'txt', etc.
  originalFileName String
  content          String         @db.Text // Base64 encoded content
  structuredContent Json?         // Structured course content
  metadata         Json?          // Course metadata
  modules          Module[]       // Course modules
  chunks           DocumentChunk[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Module {
  id        String    @id @default(cuid())
  title     String
  order     Int
  course    Course    @relation(fields: [courseId], references: [id])
  courseId  String
  lessons   Lesson[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Lesson {
  id        String    @id @default(cuid())
  title     String
  content   String    @db.Text
  order     Int
  module    Module    @relation(fields: [moduleId], references: [id])
  moduleId  String
  metadata  Json?     // Tags, difficulty level, etc.
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CourseVector {
  id        String   @id @default(cuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  chunk     String   @db.Text
  embedding Json?    // Store metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
} 